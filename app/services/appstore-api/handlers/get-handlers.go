// This file contains all handlers associated with the appstore-api
// Additionally only the GET method routes are located here.
package handlers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
)

type User struct {
	Name      string   `json:"name"`
	Dashboard []string `json:"dashboard"` // Installed user apps view
}

type UserList map[string]User

// Simulate a database for testing purposes
var UserDb = UserList{
	"1": User{
		Name:      "Bob",
		Dashboard: []string{"Webtop", "R-Studio", "Atlas"},
	},
	"2": User{
		Name:      "Sally",
		Dashboard: []string{"Jupyter", "Webtop", "Filebrowser"},
	},
}

// Applist shows the list of applications available
// for a user to install in their dashboard.
func AppList(w http.ResponseWriter, r *http.Request) {
	apps := []string{"Webtop", "Filebrowser", "Jupyter", "Balsam", "PGAdmin"}
	w.Header().Set("Content-Type", "application/json")
	err := json.NewEncoder(w).Encode(apps)
	if err != nil {
		fmt.Println(err)
	}
}

// Dashboard shows the installed applications in the user
// specific dashboard and allows the user to start, stop,
// or interact with an application of interest.
func Dashboard(w http.ResponseWriter, r *http.Request) {

	req_user := chi.URLParam(r, "userId")
	if user, ok := UserDb[req_user]; ok {
		w.Header().Set("Content-Type", "application/json")
		err := json.NewEncoder(w).Encode(user)
		if err != nil {
			fmt.Println(err)
		}

	} else {
		fmt.Fprintf(w, "User not found: %d", http.StatusNotFound)
	}

}

// Session is the active session for each app the user
// interacts with. Session queries the db for sessionId
// generated by the previously run "StartApp" function
// and routes the user to the corresponding resource.
func Session(w http.ResponseWriter, r *http.Request) {

}
